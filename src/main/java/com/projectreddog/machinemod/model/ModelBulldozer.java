// Date: 12/24/2014 5:11:17 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.projectreddog.machinemod.model;

import java.io.IOException;
import java.util.HashMap;

import org.lwjgl.opengl.GL11;

import com.projectreddog.machinemod.entity.EntityMachineModRideable;
import com.projectreddog.machinemod.reference.Reference;
import com.projectreddog.machinemod.utility.MachineModModelHelper;

import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.block.model.IBakedModel;
import net.minecraft.entity.Entity;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.model.obj.OBJLoader;
import net.minecraftforge.client.model.obj.OBJModel;

public class ModelBulldozer extends ModelTransportable {
	// fields

	public OBJModel objModel;
	private HashMap<String, IBakedModel> modelParts;
	private HashMap<String, IBakedModel> modelTracks;

	public ModelBulldozer() {

		try {
			objModel = (OBJModel) OBJLoader.INSTANCE.loadModel(new ResourceLocation(Reference.MOD_ID.toLowerCase(), "models/bulldozer.obj"));
			modelParts = MachineModModelHelper.getModelsForGroups(objModel);
			objModel = (OBJModel) OBJLoader.INSTANCE.loadModel(new ResourceLocation(Reference.MOD_ID.toLowerCase(), "models/tracksegment.obj"));
			modelTracks = MachineModModelHelper.getModelsForGroups(objModel);

		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		// myModel.renderAll();
		// GL11.glScaled(.09d, .09d, .09d);
		// GL11.glRotatef(90, 1, 0, 0);
		GL11.glTranslatef(0f, 0f, .75f);

		this.renderGroupObject("Body");
		float trackOffset = 1.47f;

		if (entity != null)

		{

			drawTrack(entity, trackOffset);
			drawTrack(entity, -trackOffset);

			GL11.glRotatef((((EntityMachineModRideable) entity).Attribute1), 1, 0, 0);

		}
		// this.renderGroupObject("Bucket_Cube.002");

		this.renderGroupObject("Bucket");
	}

	public void renderTrackObject(String groupName) {
		MachineModModelHelper.renderBakedModel(modelTracks.get(groupName));

	}

	public void drawTrack(Entity entity, float xOffset) {
		GL11.glPushMatrix();
		float trackSeparation = .26f;
		float trackOffset = 0f;
		if (((EntityMachineModRideable) entity).moveDirection == 1) {
			trackOffset = ((entity.ticksExisted * 4) % 13) / 50f;
		} else if (((EntityMachineModRideable) entity).moveDirection == -1) {
			trackOffset = -((entity.ticksExisted * 4) % 13) / 50f;
			// trackOffset = (12 % 13) / 50f;
		} else if (((EntityMachineModRideable) entity).moveDirection == 0) {
			trackOffset = 0;
		}

		GL11.glTranslatef(xOffset, -.11f, trackOffset + -2.72f);

		for (

				int i = 0; i < 14; i++) {
			GL11.glTranslatef(0, 0, trackSeparation);
			// bottom track
			renderTrackObject(MachineModModelHelper.ALL_PARTS);

		}
		GL11.glTranslatef(0, 0, -trackOffset);

		GL11.glPushMatrix();
		GL11.glTranslatef(0, -.5f, .2f);

		float angleStepAmt = 19.4f;
		GL11.glRotatef(-11 + (angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
		for (int i = 0; i < 7; i++) {

			GL11.glRotatef((angleStepAmt), 1, 0, 0);
			GL11.glTranslatef(0, .5f, 0f);
			// back rounded part track
			if (i == 6) {
				GL11.glRotatef(-(angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
			}
			renderTrackObject(MachineModModelHelper.ALL_PARTS);
			if (i == 6) {
				GL11.glRotatef((angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
			}
			GL11.glTranslatef(0, -.5f, 0f);

		}
		GL11.glPopMatrix();

		GL11.glPushMatrix();
		GL11.glRotatef(-47 + 180, 1, 0, 0);
		GL11.glTranslatef(0, 1f, trackOffset + .05f);

		for (int i = 0; i < 5; i++) {
			GL11.glTranslatef(0, 0, trackSeparation);
			// back updward slope part track

			renderTrackObject(MachineModModelHelper.ALL_PARTS);

		}
		GL11.glPopMatrix();

		GL11.glPushMatrix();
		// GL11.glTranslatef(0, -1.41f, -.62f);
		GL11.glTranslatef(0, -1.39f, -.75f);
		angleStepAmt = 19.4f;
		float rotationRadius = .60f;
		GL11.glRotatef(-60.4f + (angleStepAmt * (trackOffset / trackSeparation)) - 180, 1, 0, 0);
		for (int i = 0; i < 4; i++) {

			GL11.glRotatef((angleStepAmt), 1, 0, 0);

			float extratTranslate = 0f;

			if (i == 3) {
				extratTranslate = .025f;
			}

			GL11.glTranslatef(0, rotationRadius + extratTranslate, 0f);
			// top rounded part track
			float offsetA = 0f;
			float offsetB = -15f;

			if (i == 0) {
				GL11.glRotatef((offsetA), 1, 0, 0);
			}
			if (i == 3) {
				GL11.glRotatef((offsetB), 1, 0, 0);
			}
			renderTrackObject(MachineModModelHelper.ALL_PARTS);
			if (i == 0) {
				GL11.glRotatef((-offsetA), 1, 0, 0);
			}
			if (i == 3) {
				GL11.glRotatef(-(offsetB), 1, 0, 0);
			}
			GL11.glTranslatef(0, -(rotationRadius + extratTranslate), 0f);

		}
		GL11.glPopMatrix();

		GL11.glPushMatrix();
		GL11.glRotatef(21 + 180, 1, 0, 0);
		GL11.glTranslatef(0, 2.17f, trackOffset + .12f);

		for (int i = 0; i < 10; i++) {
			GL11.glTranslatef(0, 0, trackSeparation);
			// front downward slope part track

			renderTrackObject(MachineModModelHelper.ALL_PARTS);

		}
		GL11.glPopMatrix();

		GL11.glPushMatrix();
		GL11.glTranslatef(0, -.51f, -3.2f);

		angleStepAmt = 21f;
		rotationRadius = .55f;

		GL11.glRotatef(-160 + (angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
		for (int i = 0; i < 6; i++) {

			GL11.glRotatef((angleStepAmt), 1, 0, 0);
			GL11.glTranslatef(0, rotationRadius, 0f);
			// front rounded part track
			if (i == 6) {
				GL11.glRotatef(-(angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
			}
			renderTrackObject(MachineModModelHelper.ALL_PARTS);
			if (i == 6) {
				GL11.glRotatef((angleStepAmt * (trackOffset / trackSeparation)), 1, 0, 0);
			}
			GL11.glTranslatef(0, -rotationRadius, 0f);

		}
		GL11.glPopMatrix();

		GL11.glPopMatrix();
	}

	public void renderGroupObject(String groupName) {
		MachineModModelHelper.renderBakedModel(modelParts.get(groupName));

	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity e) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, e);
	}

	public ResourceLocation getTexture() {

		return new ResourceLocation("machinemod", Reference.MODEL_BULLDOZER_TEXTURE_LOCATION);
	}

}
